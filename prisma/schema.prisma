generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id               String             @id @default(uuid())
  name             String
  description      String
  finalPrice       Float              @map("final_price")
  fullPrice        Float              @map("full_price")
  category         String
  slug             String
  Stock            Stock?
  CartItems        CartItem[]
  OrderItems       OrderItem[]
  favorites        Favorite[]
  images           ProductImage[]
  Comment          Comment[]
  Rating           Rating[]
  ProductsOnGroups ProductsOnGroups[]

  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@map("product_images")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  phone     String?
  Carts     Cart[]
  Orders    Order[]
  addresses Address[]
  favorites Favorite[]
  Comment   Comment[]
  Reaction  Reaction[]
  Rating    Rating[]

  @@map("users")
}

model Stock {
  productId String  @id @map("product_id")
  quantity  Int
  Product   Product @relation(fields: [productId], references: [id])

  @@map("stocks")
}

model Cart {
  id     String     @id @default(uuid())
  userId String     @map("user_id")
  User   User       @relation(fields: [userId], references: [id])
  Items  CartItem[]

  @@map("carts")
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String  @map("cart_id")
  productId String  @map("product_id")
  quantity  Int
  Cart      Cart    @relation(fields: [cartId], references: [id])
  Product   Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Order {
  id        String      @id @default(uuid())
  userId    String      @map("user_id")
  status    String
  total     Float
  createdAt DateTime    @map("created_at")
  User      User        @relation(fields: [userId], references: [id])
  Items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  @map("order_id")
  productId String  @map("product_id")
  quantity  Int
  price     Float
  Order     Order   @relation(fields: [orderId], references: [id])
  Product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Address {
  id         String  @id @default(uuid())
  street     String
  city       String
  state      String
  country    String
  postalCode String  @map("postal_code")
  user       User?   @relation(fields: [userId], references: [id])
  userId     String? @map("user_id")

  @@map("address")
}

model Favorite {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @map("user_id")
  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@unique([userId, productId])
  @@map("favorites")
}

model Comment {
  id        String     @id @default(uuid())
  content   String
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @map("user_id")
  product   Product    @relation(fields: [productId], references: [id])
  productId String     @map("product_id")
  reactions Reaction[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("comments")
}

model Reaction {
  id        String       @id @default(uuid())
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @map("user_id")
  comment   Comment      @relation(fields: [commentId], references: [id])
  commentId String       @map("comment_id")
  type      ReactionType
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  @@map("reactions")
}

enum ReactionType {
  LIKE
  DISLIKE
}

model Rating {
  id        String   @id @default(uuid())
  value     Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @map("product_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("ratings")
}

model ProductGroup {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  ProductsOnGroups ProductsOnGroups[]

  @@map("product_groups")
}

model ProductsOnGroups {
  productId String       @map("product_id")
  groupId   Int          @map("group_id")
  product   Product      @relation(fields: [productId], references: [id])
  category  ProductGroup @relation(fields: [groupId], references: [id])

  @@id([productId, groupId])
  @@map("products_on_groups")
}
